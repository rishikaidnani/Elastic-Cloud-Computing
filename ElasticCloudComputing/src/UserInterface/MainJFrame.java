/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.LinkedList;
import Business.Queue;
import Business.Request;
import Business.Service;
import Business.ThreadImplementation;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Rishika Idnani
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    private static LinkedList linkedList;
    private Queue mainQueue;
    private Service listOfServersAvailable[];
    private Timer timer;
    private int numberOfAvailableServers;
    private int maximumLoad;
    private int restrictTimer;
    private int requestNumber;
    private int serverNumber;

    public MainJFrame() {
        initComponents();
        this.linkedList = new LinkedList();
        this.mainQueue = new Queue(linkedList);
        timerProcessingJButton.setVisible(false);
    }

    public int generateRandomNumberForRequest() {
        Random random = new Random();
        return 1 + random.nextInt(5);
    }

    public void dispatch(int maximumLoad) {
        Request request = mainQueue.deQueue().getRequest();
        for (int i = 0; i < listOfServersAvailable.length; i++) {
            Service server = listOfServersAvailable[i];
            if (server == null) {
                break;
            }
            if (server.getIsAvailable() == true) {
                server.getLinkedList().addLast(request);
                int load = server.getAvailableLoad();
                load--;
                server.setAvailableLoad(load);
                request.setRequestDispatched(true);
                break;
            }
        }

        if (request.getRequestDispatched() == false && numberOfAvailableServers > 0) {
            Service server = new Service(maximumLoad, ++serverNumber);
            for (int i = 0; i < listOfServersAvailable.length; i++) {
                if (listOfServersAvailable[i] == null) {
                    listOfServersAvailable[i] = server;
                    break;
                }
            }
            server.getLinkedList().addLast(request);
            int load = server.getAvailableLoad();
            load--;
            server.setAvailableLoad(load);
            request.setRequestDispatched(true);
            numberOfAvailableServers--;
            JOptionPane.showMessageDialog(null, "New Server added!");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descriptionJLabel = new javax.swing.JLabel();
        serverNumberJLabel = new javax.swing.JLabel();
        serverNumberJTextField = new javax.swing.JTextField();
        allocateServersJButton = new javax.swing.JButton();
        startJButton = new javax.swing.JButton();
        timerProcessingJButton = new javax.swing.JButton();
        maximumLoadJLabel = new javax.swing.JLabel();
        maximumLoadJTextField = new javax.swing.JTextField();
        timeJLabel = new javax.swing.JLabel();
        timeJTextField = new javax.swing.JTextField();
        noOfMachineJLabel = new javax.swing.JLabel();
        noOfMachineJTextField = new javax.swing.JTextField();
        maxTimeJLabel = new javax.swing.JLabel();
        maxTimeJTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        descriptionJLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        descriptionJLabel.setText("Elastic Cloud Computing");

        serverNumberJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        serverNumberJLabel.setText("Enter the number of available servers");

        allocateServersJButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        allocateServersJButton.setText("Allocate the Servers");
        allocateServersJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocateServersJButtonActionPerformed(evt);
            }
        });

        startJButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        startJButton.setText("Start");
        startJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startJButtonActionPerformed(evt);
            }
        });

        timerProcessingJButton.setText("Request Processing");
        timerProcessingJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerProcessingJButtonActionPerformed(evt);
            }
        });

        maximumLoadJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        maximumLoadJLabel.setText("Enter maximum load of each machine");

        timeJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        timeJLabel.setText("Enter the time (in seconds)");

        noOfMachineJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        noOfMachineJLabel.setText("Number of Virtual Machines user");

        noOfMachineJTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        maxTimeJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        maxTimeJLabel.setText("Maximum waiting time");

        maxTimeJTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionJLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maximumLoadJLabel)
                            .addComponent(timeJLabel)
                            .addComponent(serverNumberJLabel)
                            .addComponent(startJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(noOfMachineJLabel)
                            .addComponent(maxTimeJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timerProcessingJButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(maximumLoadJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                    .addComponent(timeJTextField)
                                    .addComponent(serverNumberJTextField))
                                .addGap(18, 18, 18)
                                .addComponent(allocateServersJButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(maxTimeJTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(noOfMachineJTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descriptionJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverNumberJLabel)
                    .addComponent(serverNumberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allocateServersJButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maximumLoadJLabel)
                    .addComponent(maximumLoadJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeJLabel)
                    .addComponent(timeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startJButton)
                    .addComponent(timerProcessingJButton))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfMachineJLabel)
                    .addComponent(noOfMachineJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxTimeJLabel)
                    .addComponent(maxTimeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void allocateServersJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocateServersJButtonActionPerformed
        // TODO add your handling code here:
        //setting the size of the array
        try {
            numberOfAvailableServers = Integer.parseInt(serverNumberJTextField.getText());
            if (numberOfAvailableServers <= 0) {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kindly input proper values");
            return;
        }
        this.listOfServersAvailable = new Service[numberOfAvailableServers];
    }//GEN-LAST:event_allocateServersJButtonActionPerformed

    private void startJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startJButtonActionPerformed
        // TODO add your handling code here:
        try {
            maximumLoad = Integer.parseInt(maximumLoadJTextField.getText());
            if (maximumLoad <= 0) {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kindly input proper values");
            return;
        }
        timer = new Timer(1000, new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerProcessingJButtonActionPerformed(evt);
            }
        });
        timer.start();
    }//GEN-LAST:event_startJButtonActionPerformed

    private void timerProcessingJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerProcessingJButtonActionPerformed
        // TODO add your handling code here:
        int randomNumberForIncomingRequest = generateRandomNumberForRequest();
        int randomNumberForResponse = randomNumberForIncomingRequest;
        int time = 0;

        try {
            time = Integer.parseInt(timeJTextField.getText());
            if (time <= 0) {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kindly input proper values");
        }

//logic to run the timer to only n seconds        
        if (restrictTimer < time) {
            restrictTimer++;

//Enqueuing the request        
            while (randomNumberForIncomingRequest > 0) {
                randomNumberForIncomingRequest--;
                Request request = new Request(++requestNumber);
                linkedList.addLast(request);
                request.setRequestDispatched(false);
                request.setGeneratedTime(new Date());
            }

//Dispatcher functionality
            while (randomNumberForResponse > 0) {
                randomNumberForResponse--;
                dispatch(maximumLoad);
            }

//Dequeuing the request by using thread to implement parallel dequeing by multiple servers
            for (int i = 0; i < listOfServersAvailable.length; i++) {
                Service server = listOfServersAvailable[i];
                if (server != null) {
                    ThreadImplementation ti = new ThreadImplementation(server);
                    Thread thread = new Thread(ti);
                    thread.start();
                    if (server.getAvailableLoad() == maximumLoad) {

                        numberOfAvailableServers++;
                        listOfServersAvailable[i] = listOfServersAvailable[i + 1];
                    }
                }
            }
        } else {
            timer.stop();
        }

        noOfMachineJTextField.setText(String.valueOf(Service.getNoOfServersUsed()));
        maxTimeJTextField.setText(String.valueOf(ThreadImplementation.getMaximumTime()));
    }//GEN-LAST:event_timerProcessingJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allocateServersJButton;
    private javax.swing.JLabel descriptionJLabel;
    private javax.swing.JLabel maxTimeJLabel;
    private javax.swing.JTextField maxTimeJTextField;
    private javax.swing.JLabel maximumLoadJLabel;
    private javax.swing.JTextField maximumLoadJTextField;
    private javax.swing.JLabel noOfMachineJLabel;
    private javax.swing.JTextField noOfMachineJTextField;
    private javax.swing.JLabel serverNumberJLabel;
    private javax.swing.JTextField serverNumberJTextField;
    private javax.swing.JButton startJButton;
    private javax.swing.JLabel timeJLabel;
    private javax.swing.JTextField timeJTextField;
    private javax.swing.JButton timerProcessingJButton;
    // End of variables declaration//GEN-END:variables
}
